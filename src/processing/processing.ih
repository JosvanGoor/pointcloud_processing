#include "processing.h"

using namespace actionlib;
using namespace cv;
using namespace cv_bridge;
using namespace pcl;
using namespace pcl_conversions;
using namespace pointcloud_processing;
using namespace ros;
using namespace std;
using namespace tf;

#include <pcl-1.9/pcl/segmentation/sac_segmentation.h>
// #include <pcl-1.9/pcl/segmentation/extract_clusters.h>
#include <pcl-1.9/pcl/filters/extract_indices.h>

using sensor_msgs::PointCloud2;

template <typename Ftype>
inline Offsets get_offsets(Ftype const &fields) noexcept
{
    Offsets offsets{0, 4, 8};

    for (auto const &field : fields)
    {
        if (field.name == "x")
            offsets.offset_x = field.offset;
        else if (field.name == "y")
            offsets.offset_y = field.offset;
        else if (field.name == "z")
            offsets.offset_z = field.offset;
    }
    
    return offsets;
}

// inline Offsets get_offsets(PointCloud2::_fields_type const &fields) noexcept
// {
//     Offsets offsets{0, 4, 8};

//     for (auto const &field : fields)
//     {
//         if (field.name == "x")
//             offsets.offset_x = field.offset;
//         else if (field.name == "y")
//             offsets.offset_y = field.offset;
//         else if (field.name == "z")
//             offsets.offset_z = field.offset;
//     }
    
//     return offsets;
// }